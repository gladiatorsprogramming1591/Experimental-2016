// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Newbot;

import org.usfirst.frc1591.Newbot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.Trigger;

import org.usfirst.frc1591.Newbot.subsystems.*;




/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
	

	


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton climbAuto;
    public JoystickButton armToBumper;
    public JoystickButton armTo15;
    public JoystickButton rockWall;
    public JoystickButton armto90;
    public JoystickButton armDriveB;
    public JoystickButton armToFloorB;
    public JoystickButton prepareToDriveB;
    public JoystickButton drawBridgeB;
    public JoystickButton sallyPortB;
    public JoystickButton portcullisB;
    public Joystick driveStick;
    public JoystickButton armUpB;
    public JoystickButton armDownB;
    public JoystickButton correctArmsB;
    public JoystickButton armForwardB;
    public JoystickButton armBackwardB;
    public Joystick armStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	
    
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        armStick = new Joystick(5);
        
        armBackwardB = new JoystickButton(armStick, 10);
        armBackwardB.whileHeld(new armBackwardm());
        armForwardB = new JoystickButton(armStick, 11);
        armForwardB.whileHeld(new armForwardm());
        correctArmsB = new JoystickButton(armStick, 2);
        correctArmsB.whenPressed(new correctArms());
        armDownB = new JoystickButton(armStick, 7);
        armDownB.whileHeld(new armDown());
        armUpB = new JoystickButton(armStick, 6);
        armUpB.whileHeld(new armUp());
        driveStick = new Joystick(0);
        
        portcullisB = new JoystickButton(driveStick, 10);
        portcullisB.whenPressed(new Portcullis());
        sallyPortB = new JoystickButton(driveStick, 7);
        sallyPortB.whenPressed(new sallyPort());
        drawBridgeB = new JoystickButton(driveStick, 6);
        drawBridgeB.whenPressed(new drawBridge());
        prepareToDriveB = new JoystickButton(driveStick, 9);
        prepareToDriveB.whenPressed(new prepareToClimb());
        armToFloorB = new JoystickButton(driveStick, 8);
        armToFloorB.whenPressed(new armToFloor());
        armDriveB = new JoystickButton(driveStick, 4);
        armDriveB.whenPressed(new armDrive());
        armto90 = new JoystickButton(driveStick, 5);
        armto90.whenPressed(new Arms_to_90());
        rockWall = new JoystickButton(driveStick, 11);
        rockWall.whenPressed(new rockWall2Main());
        armTo15 = new JoystickButton(driveStick, 3);
        armTo15.whenPressed(new UAto15inches());
        armToBumper = new JoystickButton(driveStick, 2);
        armToBumper.whenPressed(new UAtoBumper());
        climbAuto = new JoystickButton(driveStick, 1);
        climbAuto.whenPressed(new climbTower());


        // SmartDashboard Buttons
        SmartDashboard.putData("Nothing", new Nothing());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("controlDrive", new controlDrive());
        SmartDashboard.putData("correctArms", new correctArms());
        SmartDashboard.putData("botArmforward", new botArmforward());
        SmartDashboard.putData("armUp", new armUp());
        SmartDashboard.putData("armDown", new armDown());
        SmartDashboard.putData("armDownFull", new armDownFull());
        SmartDashboard.putData("armUpFull", new armUpFull());
        SmartDashboard.putData("leftArmUp", new leftArmUp());
        SmartDashboard.putData("leftArmDown", new leftArmDown());
        SmartDashboard.putData("rightArmUp", new rightArmUp());
        SmartDashboard.putData("rightArmDown", new rightArmDown());
        SmartDashboard.putData("liftRobot", new liftRobot());
        SmartDashboard.putData("armInFull", new armInFull());
        SmartDashboard.putData("climbTower", new climbTower());
        SmartDashboard.putData("driveFoward", new driveFoward());
        SmartDashboard.putData("driveBackward", new driveBackward());
        SmartDashboard.putData("armDrive", new armDrive());
        SmartDashboard.putData("UAto15inches", new UAto15inches());
        SmartDashboard.putData("LAto0_25", new LAto0_25());
        SmartDashboard.putData("UAtoBumper", new UAtoBumper());
        SmartDashboard.putData("UAto90", new UAto90());
        SmartDashboard.putData("UAtoFixedHeight", new UAtoFixedHeight());
        SmartDashboard.putData("LAtoFixedPosition", new LAtoFixedPosition());
        SmartDashboard.putData("Arms_to_90", new Arms_to_90());
        SmartDashboard.putData("rockWall2Main", new rockWall2Main());
        SmartDashboard.putData("rockWall3", new rockWall3());
        SmartDashboard.putData("driveForwardFast", new driveForwardFast());
        SmartDashboard.putData("armToFloor", new armToFloor());
        SmartDashboard.putData("prepareToClimb", new prepareToClimb());
        SmartDashboard.putData("UAinOnFloor", new UAinOnFloor());
        SmartDashboard.putData("armOutFull", new armOutFull());
        SmartDashboard.putData("Portcullis", new Portcullis());
        SmartDashboard.putData("drawBridge", new drawBridge());
        SmartDashboard.putData("drawBridge2", new drawBridge2());
        SmartDashboard.putData("drawBridge3", new drawBridge3());
        SmartDashboard.putData("drawBridge4", new drawBridge4());
        SmartDashboard.putData("drawBridge5", new drawBridge5());
        SmartDashboard.putData("drawBridge6", new drawBridge6());
        SmartDashboard.putData("armsToDrawBridge", new armsToDrawBridge());
        SmartDashboard.putData("sallyPort", new sallyPort());
        SmartDashboard.putData("armForwardm", new armForwardm());
        SmartDashboard.putData("armBackwardm", new armBackwardm());
        SmartDashboard.putData("armInClimb", new armInClimb());
        SmartDashboard.putData("drawbridgeDown1", new drawbridgeDown1());
        SmartDashboard.putData("gentleDrive", new gentleDrive());
        SmartDashboard.putData("driveBackward2", new driveBackward2());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getarmStick() {
        return armStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

