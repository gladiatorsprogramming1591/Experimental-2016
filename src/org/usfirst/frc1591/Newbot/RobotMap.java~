// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Newbot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */


public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon arcadeDriverearLeft;
    public static CANTalon arcadeDrivefrontLeft;
    public static CANTalon arcadeDriverearRight;
    public static CANTalon arcadeDrivefrontRight;
    public static RobotDrive arcadeDriveTimeToDrive;
    public static Encoder arcadeDriverightEncoder;
    public static Encoder arcadeDriveleftEncoder;
    public static AnalogInput arcadeDriveUltaSonic;
    public static AnalogPotentiometer armpot;
    public static SpeedController armcentralMotor;
    public static SpeedController leftArmleftMotor;
    public static AnalogPotentiometer leftArmleftPot;
    public static SpeedController rightArmrightMotor;
    public static AnalogPotentiometer rightArmrightPot;
    public static SpeedController ballGrabballEngine;
    public static DigitalInput ballGrabballLimit1;
    public static DigitalInput ballGrabballLimit2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        arcadeDriverearLeft = new CANTalon(1);
        LiveWindow.addActuator("ArcadeDrive", "rearLeft", arcadeDriverearLeft);
        
        arcadeDrivefrontLeft = new CANTalon(2);
        LiveWindow.addActuator("ArcadeDrive", "frontLeft", arcadeDrivefrontLeft);
        
        arcadeDriverearRight = new CANTalon(3);
        LiveWindow.addActuator("ArcadeDrive", "rearRight", arcadeDriverearRight);
        
        arcadeDrivefrontRight = new CANTalon(4);
        LiveWindow.addActuator("ArcadeDrive", "frontRight", arcadeDrivefrontRight);
        
        arcadeDriveTimeToDrive = new RobotDrive(arcadeDriverearLeft, arcadeDrivefrontLeft,
              arcadeDriverearRight, arcadeDrivefrontRight);
        
        arcadeDriveTimeToDrive.setSafetyEnabled(false);
        arcadeDriveTimeToDrive.setExpiration(0.1);
        arcadeDriveTimeToDrive.setSensitivity(0.5);
        arcadeDriveTimeToDrive.setMaxOutput(1.0);
        arcadeDriveTimeToDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        arcadeDriveTimeToDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        arcadeDriveTimeToDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        arcadeDriveTimeToDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        arcadeDriverightEncoder = new Encoder(0, 1, true, EncodingType.k4X);
        LiveWindow.addSensor("ArcadeDrive", "rightEncoder", arcadeDriverightEncoder);
        arcadeDriverightEncoder.setDistancePerPulse(0.001);
        arcadeDriverightEncoder.setPIDSourceType(PIDSourceType.kRate);
        arcadeDriveleftEncoder = new Encoder(2, 3, true, EncodingType.k4X);
        LiveWindow.addSensor("ArcadeDrive", "leftEncoder", arcadeDriveleftEncoder);
        arcadeDriveleftEncoder.setDistancePerPulse(0.001);
        arcadeDriveleftEncoder.setPIDSourceType(PIDSourceType.kRate);
        arcadeDriveUltaSonic = new AnalogInput(3);
        LiveWindow.addSensor("ArcadeDrive", "UltaSonic", arcadeDriveUltaSonic);
        
        armpot = new AnalogPotentiometer(2, 1.0, 0.0);
        LiveWindow.addSensor("Arm", "pot", armpot);
        
        armcentralMotor = new Victor(2);
        LiveWindow.addActuator("Arm", "centralMotor", (Victor) armcentralMotor);
        
        leftArmleftMotor = new Victor(0);
        LiveWindow.addActuator("leftArm", "leftMotor", (Victor) leftArmleftMotor);
        
        leftArmleftPot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("leftArm", "leftPot", leftArmleftPot);
        
        rightArmrightMotor = new Victor(1);
        LiveWindow.addActuator("rightArm", "rightMotor", (Victor) rightArmrightMotor);
        
        rightArmrightPot = new AnalogPotentiometer(1, 1.0, 0.0);
        LiveWindow.addSensor("rightArm", "rightPot", rightArmrightPot);
        
        ballGrabballEngine = new Victor(7);
        LiveWindow.addActuator("ballGrab", "ballEngine", (Victor) ballGrabballEngine);
        
        ballGrabballLimit1 = new DigitalInput(8);
        LiveWindow.addSensor("ballGrab", "ballLimit1", ballGrabballLimit1);
        
        ballGrabballLimit2 = new DigitalInput(9);
        LiveWindow.addSensor("ballGrab", "ballLimit2", ballGrabballLimit2);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
