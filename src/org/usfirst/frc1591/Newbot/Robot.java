// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Newbot;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1591.Newbot.commands.*;
import org.usfirst.frc1591.Newbot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;
    CameraServer server;
    
   
    public static OI oi;
    public static ArcadeDrive arcadeDrive;
    public static Arm arm;
    public static leftArm leftArm;
    public static rightArm rightArm;
    public static WinchSub winchSub;



    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    
		server = CameraServer.getInstance();
		server.setQuality(10);
		server.startAutomaticCapture("cam0");

        arcadeDrive = new ArcadeDrive();
        arm = new Arm();
        leftArm = new leftArm();
        rightArm = new rightArm();
        winchSub = new WinchSub();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
 

        autonomousCommand = new AutonomousCommand();
    	autoChooser = new SendableChooser();
    	autoChooser.addDefault("Drive", new auto_Drive());
    	autoChooser.addObject("Zero", new auto_Zero());
    	autoChooser.addObject("Cheval de Frise", new auto_Cheval());
    	autoChooser.addObject("Drawbridge", new auto_Drawbridge());
    	autoChooser.addObject("Portcullis", new auto_Portcullis());
    	autoChooser.addObject("Ramparts", new auto_Ramparts());
    	autoChooser.addObject("Rockwall", new auto_Rockwall());
    	autoChooser.addObject("Rough Terrain", new auto_RoughTerrain());
    	autoChooser.addObject("Sally Port", new auto_SallyPort());
    	SmartDashboard.putData("Autonomous chooser",autoChooser);

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        autonomousCommand = (Command) autoChooser.getSelected();
        autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    

	   
	  
	   
   
}
