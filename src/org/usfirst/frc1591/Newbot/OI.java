// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1591.Newbot;

import org.usfirst.frc1591.Newbot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.buttons.Trigger;

import org.usfirst.frc1591.Newbot.subsystems.*;




/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    public JoystickButton climbAuto;
    public JoystickButton armToBumper;
    public JoystickButton armTo15;
    public JoystickButton rockWall;
    public JoystickButton armto90;
    public JoystickButton armDriveB;
    public JoystickButton armToFloorB;
    public JoystickButton prepareToDriveB;
    public JoystickButton drawBridgeB;
    public JoystickButton sallyPortB;
    public JoystickButton portcullisB;
    public Joystick driveStick;
    public JoystickButton armUpB;
    public JoystickButton armDownB;
    public JoystickButton correctArmsB;
    public JoystickButton armForwardB;
    public JoystickButton armBackwardB;
    public Joystick armStick;
    public JoystickButton startpos;
    public JoystickButton armToCastle;
    public JoystickButton kill;
    public JoystickButton rotate_180;
    public JoystickButton winch;
    public JoystickButton winchreverse;
    
    public OI() {
    	
    

        armStick = new Joystick(5);

        correctArmsB = new JoystickButton(armStick, 1);
        correctArmsB.whenPressed(new correctArms());
        armBackwardB = new JoystickButton(armStick, 2);
        armBackwardB.whileHeld(new armBackwardm());
        armForwardB = new JoystickButton(armStick, 3);
        armForwardB.whileHeld(new armForwardm());
        startpos = new JoystickButton(armStick, 4);
        startpos.whenPressed(new startPos());
        armUpB = new JoystickButton(armStick, 6);
        armUpB.whileHeld(new armUp());
        armDownB = new JoystickButton(armStick, 7);
        armDownB.whileHeld(new armDown());
        portcullisB = new JoystickButton(armStick, 8);
        portcullisB.whenPressed(new liftGate3());
        drawBridgeB = new JoystickButton(armStick, 9);
        drawBridgeB.whenPressed(new drawBridge());
        sallyPortB = new JoystickButton(armStick, 10);
        sallyPortB.whenPressed(new sallyPort());
        winch = new JoystickButton(armStick, 11);
        winch.whileHeld(new winchOn());
        
        
        
        
        driveStick = new Joystick(0);
        
        armDriveB = new JoystickButton(driveStick, 1);
        armDriveB.whenPressed(new armDrive());
        armToFloorB = new JoystickButton(driveStick, 2);
        armToFloorB.whenPressed(new armToFloor());
        armTo15 = new JoystickButton(driveStick, 3);
        armTo15.whenPressed(new UAto15inches());
        armto90 = new JoystickButton(driveStick, 4);
        armto90.whenPressed(new Arms_to_90());
        rotate_180 = new JoystickButton(driveStick, 5);
        rotate_180.whenPressed(new rotate_180());
        rockWall = new JoystickButton(driveStick, 6);
        rockWall.whenPressed(new rockWall2Main());
        sallyPortB = new JoystickButton(driveStick, 7);
        sallyPortB.whenPressed(new sallyPort());
        prepareToDriveB = new JoystickButton(driveStick, 8);
        prepareToDriveB.whenPressed(new prepareToClimb());
        climbAuto = new JoystickButton(driveStick, 9);
        climbAuto.whenPressed(new climbTower());
        kill = new JoystickButton(driveStick, 10);
        kill.whenPressed(new killSwitch());
        winchreverse = new JoystickButton(driveStick, 11);
        winchreverse.whileHeld(new winchReverse());
        
        
        
        
        

        // SmartDashboard Buttons
      
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("drivebackward", new driveBackward(false, 0, 0.6, true, .14 * 8.65));
       
        SmartDashboard.putData("armDrive", new armDrive());
        SmartDashboard.putData("armDownFull", new armDownFull());
        SmartDashboard.putData("armUpFull", new armUpFull());
        SmartDashboard.putData("armInFull", new armInFull());
        SmartDashboard.putData("armOutFull", new armOutFull());
        SmartDashboard.putData("armForwardm", new armForwardm());    //maximum speed to max position
        SmartDashboard.putData("armBackwardm", new armBackwardm());
        
        
        
        SmartDashboard.putData("Arms_to_90", new Arms_to_90());
        SmartDashboard.putData("UAto15inches", new UAto15inches());       
        SmartDashboard.putData("rotate", new rotate(2.0, -.5, -.5));       
        SmartDashboard.putData("LAto0_25", new LAto0_25());
        SmartDashboard.putData("UAtoBumper", new UAtoBumper());
        SmartDashboard.putData("UAto90", new UAto90());
        SmartDashboard.putData("UAtoFixedHeight", new UAtoFixedHeight()); 
        SmartDashboard.putData("UAinOnFloor", new UAinOnFloor());        
        SmartDashboard.putData("armToFloor", new armToFloor());
        SmartDashboard.putData("auto_Drive", new auto_Drive());
        
//      SmartDashboard.putData("leftArmUp", new leftArmUp());
//      SmartDashboard.putData("leftArmDown", new leftArmDown());
//      SmartDashboard.putData("rightArmUp", new rightArmUp());
//      SmartDashboard.putData("rightArmDown", new rightArmDown());
        
      
        SmartDashboard.putData("rockWall2Main", new rockWall2Main());
        SmartDashboard.putData("rockWall3", new rockWall3());
        

        SmartDashboard.putData("Portcullis", new Portcullis());
        
        SmartDashboard.putData("drawBridge", new drawBridge());
        SmartDashboard.putData("drawBridge2", new drawBridge2());
        SmartDashboard.putData("drawBridge3", new drawBridge3());
        SmartDashboard.putData("armsToDrawBridge", new armsToDrawBridge()); 
        SmartDashboard.putData("drawbridgeDown1", new drawbridgeDown1());
        
        SmartDashboard.putData("sallyPort", new sallyPort());
        SmartDashboard.putData("sallyportposition1", new sallyportposition1());
      
        SmartDashboard.putData("liftGate2", new liftGate2());
        SmartDashboard.putData("liftGate", new liftGate());
        SmartDashboard.putData("liftGate3", new liftGate3());
        
        SmartDashboard.putData("prepareToClimb", new prepareToClimb());
        SmartDashboard.putData("liftRobot", new liftRobot());
        SmartDashboard.putData("climbTower", new climbTower());
    }

    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getarmStick() {
        return armStick;
    }
}

